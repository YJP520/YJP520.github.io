<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>2024 嵌入式相关要求归档</title>
      <link href="/2024/03/01/qian-ru-shi-yao-qiu-gui-dang/"/>
      <url>/2024/03/01/qian-ru-shi-yao-qiu-gui-dang/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://yjp520.github.io/">YU.J.P’s Blog</a>! 在这里你将学习到嵌入式相关知识。</p><h2 id="1-C-x2F-C"><a href="#1-C-x2F-C" class="headerlink" title="1.C/C++"></a><em><strong>1.C/C++</strong></em></h2><ul><li><p>C内存管理</p></li><li><p>全局变量和局部变量的区别</p></li><li><p>编译过程 .c到可执行文件</p></li><li><p>为什么要进行链接？</p></li><li><p>什么是野指针？</p></li><li><p>C++ 继承 多态</p></li><li><p>cmake的使用</p></li><li><p>git版本管理 分支合并,解决合并冲突</p></li></ul><h2 id="2-相关协议"><a href="#2-相关协议" class="headerlink" title="2.相关协议"></a><em><strong>2.相关协议</strong></em></h2><ul><li><p><strong>USART/UART</strong> - Universal Synchronous/Asynchronous Receive Transmitter</p><ul><li>同步/异步全双工串行通信协议</li><li>主要优势是灵活性和通用性，传输速率较低，用于低速传输和通信</li></ul></li><li><p><strong>IIC</strong> - Inter-integrated Cricuit</p><ul><li>IIC是串行通信总线，有两根双向的信号线，一根数据线SDA用于收发数据，一根时钟线SCL用于通信双方时钟。</li><li>标准模式下速率通常为100kbps</li></ul></li><li><p><strong>SPI</strong> - Serial Peripheral Interface</p><ul><li><p>高速全双工同步串行通信协议，</p></li><li><p>SPI一般应用由四个引脚组成（一主多从）：</p><ul><li><p>SCLK(Serial Clock)：串行时钟，由主机发出；</p></li><li><p>MOSI（Maser Output，Slave Input）：主机输出从机输入信号，由主机发出；</p></li><li><p>MISO（Master Input，Slave Output）：主机输入从机输出信号，由从机发出；</p></li><li><p>NSS（Slave Selected）：选择信号，由主机发出，一般是低电位有效。</p></li><li><p>主机从机连接示意：</p><p><img src="/./image/SPI_%E8%BF%9E%E6%8E%A5.png" alt="SPI_连接"></p></li></ul></li></ul></li><li><p><strong>CAN</strong> - Controller Area Network</p><ul><li>最早应用于汽车内部控制系统的检测与执行机构间的数据通信，目前是国际上引用最广泛的现场总线之一。</li><li>数据传输距离远（最远<strong>10km</strong>）</li><li>数据传输速率高（最高数据传输速率<strong>1Mbit/s</strong>）</li><li>具备优秀的<strong>仲裁</strong>机制；</li><li>使用<strong>筛选器</strong>实现多地址的数据帧传递；</li><li>借助遥控帧实现<strong>远程</strong>数据请求；</li><li>具备<strong>错误检测</strong>与处理功能；</li><li>具备数据<strong>自动重发</strong>功能；</li><li>故障节点可<strong>自动脱离总线</strong>且不影响总线上其它节点的正常工作；</li></ul></li><li><p><strong>RS485</strong></p><p>- </p></li><li><p><strong>RS232</strong></p><p>- </p></li><li><p><strong>TCP/IP</strong></p></li><li><p><strong>UDP</strong></p></li><li><p><strong>modbus</strong></p><p>- </p></li><li><p><strong>zigbee通信协议</strong></p><p>- </p></li><li><p><strong>ESP8266 / EDP协议</strong></p></li><li></li></ul><h2 id="3-Linux"><a href="#3-Linux" class="headerlink" title="3.Linux"></a><em><strong>3.Linux</strong></em></h2><ul><li>Linux基本知识( 环境的搭建，Linux 目录结构，文件类型，命令操作 Makefile的编写，shell 脚本编写，了解进程，线程 )</li><li>Linux常用指令相关</li><li>查看内存用哪个命令？</li><li>Linux下的编程环境习惯吗？有用过gdb吗？</li><li></li></ul><h2 id="5-FPGA"><a href="#5-FPGA" class="headerlink" title="5.FPGA"></a><em><strong>5.FPGA</strong></em></h2><ul><li>什么是FPGA？能干什么？</li><li>你做过FPGA项目吗？</li></ul><h2 id="6-数据结构"><a href="#6-数据结构" class="headerlink" title="6.数据结构"></a><em>6.数据结构</em></h2><ul><li>排序算法和查找算法</li><li>栈和队列</li></ul><h2 id="7-操作系统"><a href="#7-操作系统" class="headerlink" title="7.操作系统"></a><em>7.操作系统</em></h2><ul><li>进程和线程</li><li>饥饿和死锁</li></ul><h2 id="8-计算机组成原理"><a href="#8-计算机组成原理" class="headerlink" title="8.计算机组成原理"></a><em>8.计算机组成原理</em></h2><ul><li>层次结构</li><li>流水线</li><li>RAM和ROM</li></ul><h2 id="9-计算机网络"><a href="#9-计算机网络" class="headerlink" title="9.计算机网络"></a><em>9.计算机网络</em></h2><ul><li>七层架构及其功能</li><li>协议</li></ul><h2 id="10-编译原理"><a href="#10-编译原理" class="headerlink" title="10.编译原理"></a><em>10.编译原理</em></h2><ul><li>编译过程</li><li>编译前端和编译后端</li></ul><h2 id="11-数据库"><a href="#11-数据库" class="headerlink" title="11.数据库"></a><em>11.数据库</em></h2><ul><li>数据库SQL相关操作语句</li><li>数据库维护</li></ul><h2 id="12-嵌入式"><a href="#12-嵌入式" class="headerlink" title="12.嵌入式"></a>12.嵌入式</h2><ul><li>固件</li><li>STM32系列芯片</li><li></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows - clang LLVM 环境配置</title>
      <link href="/2023/05/30/clang-learning/"/>
      <url>/2023/05/30/clang-learning/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://yjp520.github.io/">YU.J.P’s Blog</a>! 在这里你将学习到关于<code>clang LLVM</code>的环境配置。</p><h3 id="安装clang"><a href="#安装clang" class="headerlink" title="安装clang"></a>安装clang</h3><p><a href="https://github.com/llvm/llvm-project/releases/tag/llvmorg-16.0.4">LLVM官网下载</a> <code>LLVM-16.0.4-win64.exe</code></p><p>安装完成后打开终端，输入命令检查安装情况：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ clang <span class="token parameter variable">-v</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><p>新建文件夹<code>Clong_Test</code>，使用<code>VS Code</code>打开编辑。</p><p>新建文件<code>main.cpp</code>，加入以下代码：</p><pre class="line-numbers language-Cpp" data-language="Cpp"><code class="language-Cpp">#include &lt;iostream&gt;int main() {    int a = 500;    int b = 20;    std::cout &lt;&lt; "🌺 Hello LLVM 🌺" &lt;&lt; std::endl;    std::cout &lt;&lt; "a + b = " &lt;&lt; a + b &lt;&lt; std::endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编译运行"><a href="#编译运行" class="headerlink" title="编译运行"></a>编译运行</h3><p>打开<code>VSCode</code>终端，使用<code>clang</code>进行编译：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ clang++ main.cpp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>运行可执行文件<code>a.exe</code>：</p><pre class="line-numbers language-bsah" data-language="bsah"><code class="language-bsah">$ .\a.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h3><p><code>敬请期待</code></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Windows - cmake环境配置</title>
      <link href="/2023/05/30/cmake-learning/"/>
      <url>/2023/05/30/cmake-learning/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://yjp520.github.io/">YU.J.P’s Blog</a>! 在这里你将学习到关于<code>cmake</code>的环境配置。</p><h3 id="安装CMake"><a href="#安装CMake" class="headerlink" title="安装CMake"></a>安装CMake</h3><p><a href="https://cmake.org/download/">CMake官网下载</a> Windows x64 Installer:<code>cmake-3.26.4-windows-x86_64.msi</code></p><h3 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a>测试代码</h3><p>新建文件夹<code>CMake_Test</code>，使用<code>VS Code</code>打开编辑。</p><p>新建文件<code>main.cpp</code>，加入以下代码：</p><pre class="line-numbers language-Cpp" data-language="Cpp"><code class="language-Cpp">#include &lt;iostream&gt;int main() {    int a = 500;    int b = 20;    std::cout &lt;&lt; "🌺 Hello LLVM 🌺" &lt;&lt; std::endl;    std::cout &lt;&lt; "a + b = " &lt;&lt; a + b &lt;&lt; std::endl;    return 0;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建文件<code>CMakeLists.txt</code>，文件名区分大小写。加入如以下内容：</p><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">cmake_minimum_required</span><span class="token punctuation">(</span><span class="token property">VERSION</span> <span class="token number">3.23</span><span class="token punctuation">)</span><span class="token keyword">project</span><span class="token punctuation">(</span>run CXX<span class="token punctuation">)</span><span class="token comment"># include_directories(Cpp_parser)</span><span class="token comment"># file(GLOB_RECURSE DIR_SRC Cpp_parser/*.cpp)</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_STANDARD</span> <span class="token number">17</span><span class="token punctuation">)</span><span class="token keyword">add_executable</span><span class="token punctuation">(</span>run main.cpp<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编译运行"><a href="#编译运行" class="headerlink" title="编译运行"></a>编译运行</h3><p>打开<code>VSCode</code>终端，在当前目录下新建<code>build</code>文件夹，进入文件夹:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">mkdir</span> build$ <span class="token builtin class-name">cd</span> build<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>使用<code>cmake</code>进行编译：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ cmake <span class="token punctuation">..</span>$ cmake <span class="token parameter variable">--build</span>$ <span class="token function">ls</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>运行可执行文件<code>run.exe</code>：</p><pre class="line-numbers language-bsah" data-language="bsah"><code class="language-bsah">$ .\Debug\run.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux-cmake环境配置</title>
      <link href="/2023/05/23/linux-environment/"/>
      <url>/2023/05/23/linux-environment/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://yjp520.github.io/">YU.J.P’s Blog</a>! 在这里你将学习到Linux关于cmake的环境配置。</p><h3 id="安装虚拟机"><a href="#安装虚拟机" class="headerlink" title="安装虚拟机"></a>安装虚拟机</h3><p>安装ubuntu镜像(本人使用 <strong>ubuntu 18.04</strong>)</p><h3 id="更新g"><a href="#更新g" class="headerlink" title="更新g++"></a>更新g++</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> g++ <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装make"><a href="#安装make" class="headerlink" title="安装make"></a>安装make</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> build-essential<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="安装cmake"><a href="#安装cmake" class="headerlink" title="安装cmake"></a>安装cmake</h3><p>先检查是否有cmake。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">which</span> cmake<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><a href="https://cmake.org/download/">下载cmake安装包</a> 直接点击下载，或者复制下载链接，使用wget下载。</p><p>解压cmake，在cmake源码所在文件夹中打开命令终端，解压文件。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> cmake-3.23.0-rc1.tar.gz <span class="token punctuation">[</span>对应自己下载的cmake<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>进入解压后的cmake文件夹中，进行检查。比如上面的cmake-3.23.0-rc1.tar.gz经过解压后，会有一个cmake-3.23.0-rc1文件夹，进入这个文件夹。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> cmake-3.23.0-rc1./bootstrap<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可能出错：</p><ol><li>对于ubuntu安装openssl系统：</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libssl-dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>未安装make</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> build-essential<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>若没有出错，编译构造，安装</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">make</span><span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>检查cmake版本</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">cmake <span class="token parameter variable">--version</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>ANTLR-自动词法语法分析器</title>
      <link href="/2023/05/21/antlr-learning/"/>
      <url>/2023/05/21/antlr-learning/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://yjp520.github.io/">YU.J.P’s Blog</a>! 在这里你将探索到ANTLR自动词法语法分析器的相关知识。</p><h3 id="ANTLR简介"><a href="#ANTLR简介" class="headerlink" title="ANTLR简介"></a>ANTLR简介</h3><p>Antlr (Another Tool for Language Recognition) 是一款强大的语法分析器生成工具，可用于读取、处理、执行和翻译结构化的文本或者二进制文件。它被广泛应用于学术领域和工业生产实践，是众多语言、工具和框架的基石。我们可以使用Antlr来开发DSL（Domain Specific Language，领域特定语言），或者一些实用工具，比如配置文件读取器、遗留代码转换器和Json解析器等等。</p><h3 id="IDEA环境开发入门"><a href="#IDEA环境开发入门" class="headerlink" title="IDEA环境开发入门"></a>IDEA环境开发入门</h3><ul><li><a href="http://t.csdn.cn/QYoZf">CSDN参考博客链接 1</a></li><li><a href="http://t.csdn.cn/I7d8d">CSDN参考博客链接 2</a></li></ul><p><strong>安装Antlr插件</strong></p><p>打开IDEA，在File—Settings—Plugins中，安装ANTLR v4 grammar plugin插件。</p><p><strong>第一个项目</strong></p><p>新建一个Maven项目，在pom文件中添加如下依赖，加在&lt;/project&gt;之前。注意版本号要根据自己安装的antlr进行修改。</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.antlr<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>antlr4-runtime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.12.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugins</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>plugin</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.antlr<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>antlr4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>4.12.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executions</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>execution</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">&gt;</span></span>antlr<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goals</span><span class="token punctuation">&gt;</span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>goal</span><span class="token punctuation">&gt;</span></span>antlr4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goal</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>goals</span><span class="token punctuation">&gt;</span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>phase</span><span class="token punctuation">&gt;</span></span>none<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>phase</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>execution</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executions</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>outputDirectory</span><span class="token punctuation">&gt;</span></span>src/test/java<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>outputDirectory</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>listener</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>listener</span><span class="token punctuation">&gt;</span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>treatWarningsAsErrors</span><span class="token punctuation">&gt;</span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>treatWarningsAsErrors</span><span class="token punctuation">&gt;</span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">&gt;</span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugin</span><span class="token punctuation">&gt;</span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>plugins</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>新建一个.g4文件，用来编写要识别语言的词法规则和语法规则，比如这里我们的文件名为Hello.g4</p><pre class="line-numbers language-antlr4" data-language="antlr4"><code class="language-antlr4"><span class="token keyword">grammar</span> Hello<span class="token punctuation">;</span>      <span class="token comment">// 定义一个名为Hello的语法，名字与文件名一致</span><span class="token definition rule class-name">r</span> <span class="token punctuation">:</span> <span class="token string">'Hello'</span> <span class="token constant">ID</span>      <span class="token comment">// 定义一个r规则，匹配一个关键字Hello和紧随其后的标识符ID</span>  <span class="token operator">|</span> <span class="token string">'hello'</span> <span class="token constant">ID</span><span class="token punctuation">;</span>     <span class="token comment">// "|"是备选分支的分隔符</span><span class="token definition token constant">ID</span> <span class="token punctuation">:</span> <span class="token character-class regex"><span class="token punctuation">[</span>a<span class="token range punctuation">-</span>z<span class="token punctuation">]</span></span><span class="token operator">+</span><span class="token punctuation">;</span>        <span class="token comment">// 定义ID标识符，由小写字符组成</span><span class="token definition token constant">WS</span> <span class="token punctuation">:</span> <span class="token character-class regex"><span class="token punctuation">[</span> <span class="token escape">\t</span><span class="token escape">\r</span><span class="token escape">\n</span><span class="token punctuation">]</span></span><span class="token operator">+</span> <span class="token operator">-&gt;</span> <span class="token command"><span class="token function">skip</span></span><span class="token punctuation">;</span>    <span class="token comment">// 忽略空格、Tab、换行以及\r （Windows）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我们就可以使用Antlr工具来将该语法文件转换成可以识别该语法文件所描述语言的程序。</p><p>不过在此之前，我们需要先配置下生成的程序输出路径，右键Hello.g4，找到 <strong>Configure ANTLR</strong>。</p><p>接着配置文件的输出路径和目录</p><table><thead><tr><th>Term</th><th>Setting</th></tr></thead><tbody><tr><td>output directory where all output is generated…</td><td>[输出文件路径hello]</td></tr><tr><td>package/namespace for the generated code…</td><td>[hello]</td></tr></tbody></table><p>接着我们就可以使用antlr工具来将语法文件转换成可以识别该语法文件所描述语言的程序了。</p><p>右键Hello.g4，点击 <strong>Generate ANTLR Recognizer</strong> ，接着可以看到目录下面生成了许多文件</p><p>其中HelloLexer是词法分析器，HelloParser是语法分析器，HelloVistor和HelloListener是两种遍历树的机制，分别是访问者模式和监听器模式。有关Antlr概念与术语的部分，我们第二章在讲，这里了解个大概就行。</p><p>最后，我们就可以来编写主程序来调用上述代码了。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">hello<span class="token punctuation">.</span></span><span class="token class-name">HelloLexer</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">hello<span class="token punctuation">.</span></span><span class="token class-name">HelloParser</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>antlr<span class="token punctuation">.</span>v4<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span></span><span class="token class-name">ANTLRInputStream</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>antlr<span class="token punctuation">.</span>v4<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span></span><span class="token class-name">CommonTokenStream</span></span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloMain</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">String</span> expr<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>        <span class="token comment">// 对每一个输入的字符串，构造一个 ANTLRStringStream 流 in</span>        <span class="token class-name">ANTLRInputStream</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ANTLRInputStream</span><span class="token punctuation">(</span>expr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 用 in 构造词法分析器 lexer，词法分析的作用是将字符聚集成单词或者符号</span>        <span class="token class-name">HelloLexer</span> lexer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloLexer</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 用词法分析器 lexer 构造一个记号流 tokens</span>        <span class="token class-name">CommonTokenStream</span> tokens <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommonTokenStream</span><span class="token punctuation">(</span>lexer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 再使用 tokens 构造语法分析器 parser,至此已经完成词法分析和语法分析的准备工作</span>        <span class="token class-name">HelloParser</span> parser <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloParser</span><span class="token punctuation">(</span>tokens<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 最终调用语法分析器的规则 r（这个是我们在Hello.g4里面定义的那个规则），完成对表达式的验证</span>        parser<span class="token punctuation">.</span><span class="token function">r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> testStr<span class="token operator">=</span><span class="token punctuation">{</span>                <span class="token string">"Hello world"</span><span class="token punctuation">,</span>                <span class="token string">"hello world"</span><span class="token punctuation">,</span>                <span class="token string">"hi world"</span>        <span class="token punctuation">}</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> testStr<span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Input: "</span> <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">run</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后运行结果如下：</p><pre><code>Input: Hello worldInput: hello worldInput: hi worldline 1:0 mismatched input 'hi' expecting {'Hello', 'hello'}Process finished with exit code 0</code></pre><p>除了以上方式，我们还可以使用文法可视化工具来测试语法规则</p><ul><li><p>在Hello.g4中选择一个语法规则比如r，右键选择Test Rule r</p></li><li><p>在ANTLR Preview中输入要校验的文本，比如hello world</p></li></ul><h3 id="开发进阶"><a href="#开发进阶" class="headerlink" title="开发进阶"></a>开发进阶</h3><p>敬请期待！</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>一些有用的资源合集</title>
      <link href="/2023/05/20/wonderful-source/"/>
      <url>/2023/05/20/wonderful-source/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://yjp520.github.io/">YU.J.P’s Blog</a>! 在这里你将探索到很多非常具有价值的资源。</p><h2 id="高校联合资源库"><a href="#高校联合资源库" class="headerlink" title="高校联合资源库"></a>高校联合资源库</h2><h3 id="编译原理三大书籍"><a href="#编译原理三大书籍" class="headerlink" title="编译原理三大书籍"></a>编译原理三大书籍</h3><ol><li><p>龙书（Dragon book）<br>英文名：Compilers: Principles,Techniques,and Tools<br>作者：Alfred V.Aho,Ravi Sethi,Jeffrey D.Ullman<br>中文名：编译原理技术和工具</p></li><li><p>虎书（Tiger book）<br>英文名：Modern Compiler Implementation in C<br>作者：Andrew W.Appel,with Jens Palsberg<br>中文名：现代编译原理-C语言描述 </p></li><li><p>鲸书（Whale book）<br>英文名：Advanced Compiler Design and Implementation<br>作者：Steven S.Muchnick<br>中文名：高级编译器设计与实现</p></li></ol><h3 id="资源网站自寻查找"><a href="#资源网站自寻查找" class="headerlink" title="资源网站自寻查找"></a>资源网站自寻查找</h3><ul><li><a href="https://github.com/lib-pku/libpku">北京大学课程资料整理</a></li><li><a href="https://github.com/QSCTech/zju-icicles">浙江大学课程攻略共享计划</a></li><li><a href="https://github.com/PKUanonym/REKCARC-TSC-UHT">清华大学计算机系课程攻略</a></li><li><a href="https://github.com/PKUanonym/REKCARC-TSC-UHT">中国科学技术大学课程资源</a></li><li><a href="https://github.com/CoolPhilChen/SJTU-Courses/">上海交通大学课程分享</a></li></ul><h2 id="其他资源"><a href="#其他资源" class="headerlink" title="其他资源"></a>其他资源</h2><ul><li><a href="https://yjp520.github.io/">敬请期待</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VsCode-C++问题集合</title>
      <link href="/2023/05/17/vscode-c-solusion/"/>
      <url>/2023/05/17/vscode-c-solusion/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://yjp520.github.io/">YU.J.P’s Blog</a>! 在这里你将学习到VsCode配合C++环境使用时，一些细节问题的解决办法。</p><h2 id="细节问题"><a href="#细节问题" class="headerlink" title="细节问题"></a>细节问题</h2><h3 id="如何运行程序"><a href="#如何运行程序" class="headerlink" title="如何运行程序"></a>如何运行程序</h3><p>在Vscode中打开终端。</p><ol><li><p><strong>一般执行</strong></p><p> 如果只有一个.cpp文件，如main.cpp，使用以下命令编程可执行程序。</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ g++ <span class="token parameter variable">-o</span> run ./main.cpp$ ./run.exe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="2"><li><p><strong>多个.cpp编译</strong></p><p> 如果有多个.cpp文件，如main.cpp、src/test.cpp、src/init.cpp，使用以下命令编程可执行程序。</p></li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ g++ <span class="token parameter variable">-o</span> run ./main.cpp ./src/test.cpp ./src/src/init.cpp$ ./run.exe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/image/img_16.jpg" alt="img.png"></p><h2 id="重点问题"><a href="#重点问题" class="headerlink" title="重点问题"></a>重点问题</h2><h3 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GitLab-VsCode-提交步骤</title>
      <link href="/2023/05/16/gitlab-vscode/"/>
      <url>/2023/05/16/gitlab-vscode/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://yjp520.github.io/">YU.J.P’s Blog</a>! 在这里你将学习到GitLab联合VsCode提交代码的基本用法。</p><h2 id="基本步骤"><a href="#基本步骤" class="headerlink" title="基本步骤"></a>基本步骤</h2><h3 id="拉取项目"><a href="#拉取项目" class="headerlink" title="拉取项目"></a>拉取项目</h3><ol><li>克隆原仓库</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> clone https://gitlab.eduxiji.net/202311660201858/wgz.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>使用 Vscode 打开项目文件目录</li></ol><h3 id="Vscode-配置Git"><a href="#Vscode-配置Git" class="headerlink" title="Vscode 配置Git"></a>Vscode 配置Git</h3><ol><li>找到本机的 git.exe 路径，如命令行输入</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ where <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/image/img_10.png" alt="img.png"></p><ol start="2"><li>Vscode 找到 Git 配置，点击 Edit in settings.json</li></ol><p><img src="/image/img_8.png" alt="img.png"></p><ol start="3"><li>在”git-path”处加入git路径</li></ol><p><img src="/image/img_9.png" alt="img.png"></p><h3 id="创建个人分支"><a href="#创建个人分支" class="headerlink" title="创建个人分支"></a>创建个人分支</h3><ol><li>点击分支目录，添加自己的分支</li></ol><p><img src="/image/img_11.png" alt="img.png"></p><ol start="2"><li>终端或命令行使用命令 添加账户及邮箱</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.name <span class="token string">"Your Name"</span><span class="token function">git</span> config <span class="token parameter variable">--global</span> user.email <span class="token string">"youremail@yourdomain.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol start="3"><li>看个人情况进行项目构建，代码添加</li></ol><p><img src="/image/img_12.png" alt="img.png"></p><ol start="4"><li>点击加号,然后点击 commit</li></ol><p><img src="/image/img_13.png" alt="img.png"></p><ol start="5"><li>添加提交日志，保存</li></ol><p><img src="/image/img_14.png" alt="img.png"></p><ol start="6"><li>点击右上角勾勾 上传 push,然后点击以下按钮，完成上传</li></ol><p><img src="/image/img_15.png" alt="img.png"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>VsCode 配置 C++ 环境</title>
      <link href="/2023/05/16/vscode-c-fix/"/>
      <url>/2023/05/16/vscode-c-fix/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://yjp520.github.io/">YU.J.P’s Blog</a>! 在这里你将学习到VsCode配置C++环境的方法。</p><h2 id="目的描述"><a href="#目的描述" class="headerlink" title="目的描述"></a>目的描述</h2><p>使用 VsCode 配置 C++ 编程环境。 </p><h2 id="配置步骤"><a href="#配置步骤" class="headerlink" title="配置步骤"></a>配置步骤</h2><h3 id="安装VScode"><a href="#安装VScode" class="headerlink" title="安装VScode"></a>安装VScode</h3><ul><li>自行安装 - <a href="https://code.visualstudio.com/">VsCode下载地址</a></li></ul><h3 id="安装MinGW"><a href="#安装MinGW" class="headerlink" title="安装MinGW"></a>安装MinGW</h3><ul><li><p>下载MinGW - <a href="https://sourceforge.net/projects/mingw-w64/files/mingw-w64/mingw-w64-release/">MinGW下载地址</a></p></li><li><p>MinGW压缩包解压</p></li><li><p>将 MinGW/bin 路径添加 环境变量 path</p><ul><li>命令行 输入 gcc -v 或 gcc -v 或 g++ -v 查看安装情况</li></ul></li></ul><h3 id="VsCode配置"><a href="#VsCode配置" class="headerlink" title="VsCode配置"></a>VsCode配置</h3><ul><li>下载 C/C++ 插件，下载完成后重启vsCode</li></ul><p><img src="/image/img_7.png" alt="img.png"></p><ul><li><p>新建文件夹（用来放vsCode的项目）</p></li><li><p>在vsCode文件夹下创建一个.vscode文件夹并创建3个文件， 分别是c_cpp_properties.json，launch.json，tasks.json 。可以直接复制三个json文件，但是路径需要修改，备注的区域都需要，但其他位置都不要动。</p></li></ul><p>c_cpp_properties.json</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>          <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"Win32"</span><span class="token punctuation">,</span>          <span class="token property">"includePath"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"${workspaceFolder}/**"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token property">"defines"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"_DEBUG"</span><span class="token punctuation">,</span> <span class="token string">"UNICODE"</span><span class="token punctuation">,</span> <span class="token string">"_UNICODE"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>          <span class="token property">"windowsSdkVersion"</span><span class="token operator">:</span> <span class="token string">"10.0.17763.0"</span><span class="token punctuation">,</span>          <span class="token property">"compilerPath"</span><span class="token operator">:</span> <span class="token string">"F:\\codeConfiguration\\minGW\\bin\\g++.exe"</span><span class="token punctuation">,</span>   <span class="token comment">/*修改成自己bin目录下的g++.exe，这里的路径和电脑里复制的文件目录有一点不一样，这里是两个反斜杠\\*/</span>          <span class="token property">"cStandard"</span><span class="token operator">:</span> <span class="token string">"c11"</span><span class="token punctuation">,</span>          <span class="token property">"cppStandard"</span><span class="token operator">:</span> <span class="token string">"c++17"</span><span class="token punctuation">,</span>          <span class="token property">"intelliSenseMode"</span><span class="token operator">:</span> <span class="token string">"${default}"</span>        <span class="token punctuation">}</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token property">"version"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>launch.json</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token comment">// 使用 IntelliSense 了解相关属性。 </span>    <span class="token comment">// 悬停以查看现有属性的描述。</span>    <span class="token comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>    <span class="token property">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>            <span class="token property">"name"</span><span class="token operator">:</span> <span class="token string">"g++.exe build and debug active file"</span><span class="token punctuation">,</span>            <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"cppdbg"</span><span class="token punctuation">,</span>            <span class="token property">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>            <span class="token property">"program"</span><span class="token operator">:</span> <span class="token string">"${fileDirname}\\${fileBasenameNoExtension}.exe"</span><span class="token punctuation">,</span>            <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"stopAtEntry"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"${workspaceFolder}"</span><span class="token punctuation">,</span>            <span class="token property">"environment"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"externalConsole"</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>            <span class="token property">"MIMode"</span><span class="token operator">:</span> <span class="token string">"gdb"</span><span class="token punctuation">,</span>            <span class="token property">"miDebuggerPath"</span><span class="token operator">:</span> <span class="token string">"F:\\codeConfiguration\\MinGW\\bin\\gdb.exe"</span><span class="token punctuation">,</span><span class="token comment">/*修改成自己bin目录下的gdb.exe，这里的路径和电脑里复制的文件目录有一点不一样，这里是两个反斜杠\\*/</span>            <span class="token property">"setupCommands"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">{</span>                    <span class="token property">"description"</span><span class="token operator">:</span> <span class="token string">"为 gdb 启用整齐打印"</span><span class="token punctuation">,</span>                    <span class="token property">"text"</span><span class="token operator">:</span> <span class="token string">"-enable-pretty-printing"</span><span class="token punctuation">,</span>                    <span class="token property">"ignoreFailures"</span><span class="token operator">:</span> <span class="token boolean">true</span>                <span class="token punctuation">}</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token property">"preLaunchTask"</span><span class="token operator">:</span> <span class="token string">"task g++"</span>        <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>tasks.json</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">{</span>    <span class="token comment">// See https://go.microsoft.com/fwlink/?LinkId=733558 </span>    <span class="token comment">// for the documentation about the tasks.json format</span>    <span class="token property">"version"</span><span class="token operator">:</span> <span class="token string">"2.0.0"</span><span class="token punctuation">,</span>    <span class="token property">"tasks"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">{</span>        <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"shell"</span><span class="token punctuation">,</span>        <span class="token property">"label"</span><span class="token operator">:</span> <span class="token string">"task g++"</span><span class="token punctuation">,</span>        <span class="token property">"command"</span><span class="token operator">:</span> <span class="token string">"F:\\codeConfiguration\\MinGW\\bin\\g++.exe"</span><span class="token punctuation">,</span><span class="token comment">/*修改成自己bin目录下的g++.exe，这里的路径和电脑里复制的文件目录有一点不一样，这里是两个反斜杠\\*/</span>        <span class="token property">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>            <span class="token string">"-g"</span><span class="token punctuation">,</span>            <span class="token string">"${file}"</span><span class="token punctuation">,</span>            <span class="token string">"-o"</span><span class="token punctuation">,</span>            <span class="token string">"${fileDirname}\\${fileBasenameNoExtension}.exe"</span><span class="token punctuation">,</span>            <span class="token string">"-I"</span><span class="token punctuation">,</span>            <span class="token string">"F:\\codeProject\\vsCode"</span><span class="token punctuation">,</span>      <span class="token comment">/*修改成自己放c/c++项目的文件夹，这里的路径和电脑里复制的文件目录有一点不一样，这里是两个反斜杠\\*/</span>            <span class="token string">"-std=c++17"</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"options"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"cwd"</span><span class="token operator">:</span> <span class="token string">"F:\\codeConfiguration\\MinGW\\bin"</span><span class="token comment">/*修改成自己bin目录，这里的路径和电脑里复制的文件目录有一点不一样，这里是两个反斜杠\\*/</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"problemMatcher"</span><span class="token operator">:</span><span class="token punctuation">[</span>            <span class="token string">"$gcc"</span>        <span class="token punctuation">]</span><span class="token punctuation">,</span>        <span class="token property">"group"</span><span class="token operator">:</span> <span class="token string">"build"</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span>    <span class="token punctuation">]</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ul><li>创建一个文件夹,创建main.cpp，然后按F5运行</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Hello World."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>neo4j-图数据库使用教程</title>
      <link href="/2022/12/05/neo4j-learning/"/>
      <url>/2022/12/05/neo4j-learning/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://yjp520.github.io/">YU.J.P’s Blog</a>! 在这里你将学习neo4j图数据库的基本使用教程。</p><hr><h3 id="理论知识"><a href="#理论知识" class="headerlink" title="理论知识"></a><strong>理论知识</strong></h3><p><a href="https://www.bilibili.com/video/BV1pG4y1t7er?p=37&amp;vd_source=0485bf51f6c5687165e39d63ac6bb095">教程资源-知识图谱导论-bilibili</a></p><p><strong>什么是知识图谱？先摘一段百度百科：</strong></p><p>知识图谱（Knowledge Graph），在图书情报界称为知识域可视化或知识领域映射地图，是显示知识发展进程与结构关系的一系列各种不同的图形，用 可视化技术描述知识资源及其载体，挖掘、分析、 构建、绘制和显示知识及它们之间的相互联系。 知识图谱是通过将应用数学、 图形学、信息可视化技术、 信息科学等学科的理论与方法与计量学引文分析、共现分析等方法结合，并利用可视化的图谱形象地展示学科的核心结构、发展历史、 前沿领域以及整体知识架构达到多学科融合目的的现代理论。它能为学科研究提供切实的、有价值的参考。</p><hr><h3 id="neo4j使用简介"><a href="#neo4j使用简介" class="headerlink" title="neo4j使用简介"></a><strong>neo4j使用简介</strong></h3><p>neo4j下载链接：<a href="https://neo4j.com/download-center/">neo4j download</a></p><p>操作界面展示<br><img src="/image/img_5.png" alt="img.png"></p><p>启动命令-CMD命令行</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ neo4j.bat console<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/image/img_6.png" alt="img.png"></p><p>打开操作界面</p><pre class="line-numbers language-none"><code class="language-none">浏览器输入 http://localhost:7474/登录 - 初始用户：neo4j 初始密码：neo4j目前 - 用户名：neo4j 密码：123456<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>neo4j使用-参考博客链接</p><p><a href="http://t.csdn.cn/M8w0j">1. Neo4j 安装、使用教程</a></p><p><a href="http://t.csdn.cn/vzbjO">2. neo4j新手教程</a></p><p><a href="https://zhuanlan.zhihu.com/p/88745411?utm_source=wechat_session">3. 手把手教你快速入门知识图谱 - Neo4J教程</a></p><p><a href="http://t.csdn.cn/ARRFy">4. Neo4j：入门基础（二）之导入CSV文件</a></p><p>python操作简介</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> py2neo <span class="token keyword">import</span> Graph<span class="token punctuation">,</span> Node<span class="token punctuation">,</span> Relationship<span class="token punctuation">,</span> NodeMatcher<span class="token keyword">import</span> py2neog <span class="token operator">=</span> Graph<span class="token punctuation">(</span><span class="token string">"http://localhost:7474/"</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'neo4j'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token comment"># 结点</span>test_node_1 <span class="token operator">=</span> Node<span class="token punctuation">(</span><span class="token string">"Person"</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'P1'</span><span class="token punctuation">)</span>test_node_2 <span class="token operator">=</span> Node<span class="token punctuation">(</span><span class="token string">"Person"</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">'P2'</span><span class="token punctuation">)</span><span class="token comment"># 添加属性</span>test_node_1<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">18</span>test_node_1<span class="token punctuation">[</span><span class="token string">'sex'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'男'</span>test_node_2<span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">19</span>test_node_2<span class="token punctuation">[</span><span class="token string">'sex'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'女'</span><span class="token comment"># 创建结点</span>g<span class="token punctuation">.</span>create<span class="token punctuation">(</span>test_node_1<span class="token punctuation">)</span>g<span class="token punctuation">.</span>create<span class="token punctuation">(</span>test_node_2<span class="token punctuation">)</span><span class="token comment"># 创建覆盖式结点</span>g<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>test_node_1<span class="token punctuation">,</span> <span class="token string">"Person"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span>g<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>test_node_2<span class="token punctuation">,</span> <span class="token string">"Person"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token comment"># 创建关系</span>friend <span class="token operator">=</span> Relationship<span class="token punctuation">(</span>test_node_1<span class="token punctuation">,</span> <span class="token string">'friend'</span><span class="token punctuation">,</span> test_node_2<span class="token punctuation">)</span>g<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>friend<span class="token punctuation">,</span> <span class="token string">"Person"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span class="token comment"># 查询结点</span>matcher <span class="token operator">=</span> NodeMatcher<span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>matcher<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token string">"Person"</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">"P1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>建立图谱</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> csv<span class="token keyword">from</span> py2neo <span class="token keyword">import</span> Graph<span class="token punctuation">,</span> Node<span class="token punctuation">,</span> Relationship<span class="token punctuation">,</span> NodeMatcher<span class="token keyword">import</span> py2neog <span class="token operator">=</span> Graph<span class="token punctuation">(</span><span class="token string">"http://localhost:7474/"</span><span class="token punctuation">,</span> user<span class="token operator">=</span><span class="token string">'neo4j'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'123456'</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'triples.csv'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    reader <span class="token operator">=</span> csv<span class="token punctuation">.</span>reader<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> reader<span class="token punctuation">:</span>        <span class="token keyword">if</span> reader<span class="token punctuation">.</span>line_num<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"当前行数"</span><span class="token punctuation">,</span> reader<span class="token punctuation">.</span>line_num<span class="token punctuation">,</span> <span class="token string">"当前内容："</span><span class="token punctuation">,</span> item<span class="token punctuation">)</span>        start_node <span class="token operator">=</span> Node<span class="token punctuation">(</span><span class="token string">"Person"</span><span class="token punctuation">,</span> name<span class="token operator">=</span>item<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        end_node <span class="token operator">=</span> Node<span class="token punctuation">(</span><span class="token string">"Person"</span><span class="token punctuation">,</span> name<span class="token operator">=</span>item<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        relation <span class="token operator">=</span> Relationship<span class="token punctuation">(</span>start_node<span class="token punctuation">,</span> item<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> end_node<span class="token punctuation">)</span>        g<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>start_node<span class="token punctuation">,</span> <span class="token string">"Person"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span>        g<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>end_node<span class="token punctuation">,</span> <span class="token string">"Person"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span>        g<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>relation<span class="token punctuation">,</span> <span class="token string">"Person"</span><span class="token punctuation">,</span> <span class="token string">"name"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据查询</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ MATCH <span class="token punctuation">(</span>p: Person <span class="token punctuation">{</span>name: <span class="token string">"贾宝玉"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>-<span class="token punctuation">[</span>k: 丫鬟<span class="token punctuation">]</span>-<span class="token punctuation">(</span>r<span class="token punctuation">)</span> <span class="token builtin class-name">return</span> p,k,r<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查询所有有关系的节点</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ MATCH <span class="token punctuation">(</span>a<span class="token punctuation">)</span>--<span class="token punctuation">(</span><span class="token punctuation">)</span> RETURN a<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>删除数据库中以往的图</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ MATCH <span class="token punctuation">(</span>n<span class="token punctuation">)</span> DETACH DELETE n<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo博客样式失效问题</title>
      <link href="/2022/12/03/hexo-errors/"/>
      <url>/2022/12/03/hexo-errors/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://yjp520.github.io/">YU.J.P’s Blog</a>! 在这里你将学习到Hexo博客搭建过程中常见的css失效问题解决办法。</p><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>Hexo本地效果正常，部署后丢失css样式</p><h3 id="添加设置问题"><a href="#添加设置问题" class="headerlink" title="添加设置问题"></a>添加设置问题</h3><p>修改文件_config.yml下的URL项。根路径root需要好好考虑。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># URL</span><span class="token comment">## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'</span><span class="token key atrule">url</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/YJP520/YJP520.github.io<span class="token key atrule">root</span><span class="token punctuation">:</span> /<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hexo-Git-基本操作</title>
      <link href="/2022/12/03/hexo-git/"/>
      <url>/2022/12/03/hexo-git/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://yjp520.github.io/">YU.J.P’s Blog</a>! 在这里你将学习到Hexo的基本用法和Git的基本用法。</p><h2 id="Git-基本操作"><a href="#Git-基本操作" class="headerlink" title="Git - 基本操作"></a>Git - 基本操作</h2><h3 id="添加分支"><a href="#添加分支" class="headerlink" title="添加分支"></a>添加分支</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> init$ <span class="token function">git</span> branch$ <span class="token function">git</span> remote <span class="token function">add</span> origin https://github.com/YJP520/YJP520.github.io.git$ <span class="token function">git</span> remote <span class="token parameter variable">-v</span>$ <span class="token function">git</span> status$ <span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span>$ <span class="token function">git</span> commit$ <span class="token function">git</span> commit <span class="token parameter variable">-m</span> <span class="token string">"init"</span>$ <span class="token function">git</span> branch$ <span class="token function">git</span> push <span class="token parameter variable">-u</span> origin master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除本地分支（在另一个分支下删除）"><a href="#删除本地分支（在另一个分支下删除）" class="headerlink" title="删除本地分支（在另一个分支下删除）"></a>删除本地分支（在另一个分支下删除）</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> branch <span class="token parameter variable">-d</span> <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title="删除远程分支"></a>删除远程分支</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">git</span> push origin <span class="token parameter variable">-d</span> <span class="token punctuation">[</span>name<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Hexo-基本操作"><a href="#Hexo-基本操作" class="headerlink" title="Hexo - 基本操作"></a>Hexo - 基本操作</h2><h3 id="Hexo上传"><a href="#Hexo上传" class="headerlink" title="Hexo上传"></a>Hexo上传</h3><p>清除本地静态博客网页</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo clean<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成本地静态博客网页</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上传博客网页</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="初始化模板"><a href="#初始化模板" class="headerlink" title="初始化模板"></a>初始化模板</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo init blog-demo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="插件安装"><a href="#插件安装" class="headerlink" title="插件安装"></a>插件安装</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git <span class="token parameter variable">--save</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="博客推送（添加设置）"><a href="#博客推送（添加设置）" class="headerlink" title="博客推送（添加设置）"></a>博客推送（添加设置）</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Deployment</span><span class="token comment">## Docs: https://hexo.io/docs/one-command-deployment</span><span class="token key atrule">deploy</span><span class="token punctuation">:</span><span class="token key atrule">type</span><span class="token punctuation">:</span> git<span class="token key atrule">repository</span><span class="token punctuation">:</span> https<span class="token punctuation">:</span>//github.com/YJP520/YJP520.github.io.git<span class="token key atrule">branch</span><span class="token punctuation">:</span> main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello Hexo 开始个人博客</title>
      <link href="/2022/12/03/hello-hexo/"/>
      <url>/2022/12/03/hello-hexo/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
